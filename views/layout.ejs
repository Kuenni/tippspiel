<!DOCTYPE html>
<html>
	<head>
		<title>Bundesligatippspiel</title>

		<!-- Viewport mobile tag for sensible mobile support -->
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
		<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.1/angular.min.js"></script>
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
		<!--
		Stylesheets and Preprocessors
		==============================

		You can always bring in CSS files manually with `<link>` tags, or asynchronously
		using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
		of Sails' conventional asset pipeline (boilerplate Gruntfile).

		By default, stylesheets from your `assets/styles` folder are included
		here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
		are supported. In production, your styles will be minified and concatenated into
		a single file.

		To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
		For example, here are a few things you could do:

		+ Change the order of your CSS files
		+ Import stylesheets from other directories
		+ Use a different or additional preprocessor, like SASS, SCSS or Stylus
		-->

		<!--STYLES-->
		<link rel="stylesheet" href="/styles/importer.css">
		<!--STYLES END-->
	</head>

	<body>
		<nav class="navbar navbar-default">
			<div class="container-fluid">
				<div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
					<ul class="nav navbar-nav">
						<li class=<%= Helper.isCurrentPage(req, 'main', 'index') ? 'active' : ''%>>
							<a href="/">Home</a>
						</li>
						<li class=<%= Helper.isCurrentPage(req, 'main', 'results') ? 'active' : ''%>>
							<a href="/results">Results</a>
						</li>
						<li class=<%= Helper.isCurrentPage(req, 'bet', 'bets') ? 'active' : ''%>>
							<a href="/bets">Bets</a>
						</li>
						<li class=<%= Helper.isCurrentPage(req, 'main', 'login') ? 'active' : ''%>>
							<a href=
							<%= Helper.isUserLoggedIn(req) ? '/logout' : '/login'%>>
							<%= Helper.isUserLoggedIn(req) ? "Logout" : "Login"%></a>
						</li>
						<%if( !Helper.isUserLoggedIn(req)){%>
						<li class=<%= Helper.isCurrentPage(req, 'main', 'signup') ? 'active' : ''%>>
							<a href="/signup">Signup</a>
						</li>
						<%}%>
						<li class=<%= Helper.isCurrentPage(req, 'main', 'loadData') ? 'active' : ''%>>
							<a href="/loadData">Load Data</a>
						</li>
					</ul>
				</div><!-- /.navbar-collapse -->
			</div><!-- /.container-fluid -->
		</nav>
		
		<!-- Flash messages-->
	<% if (messages && messages['error'].length > 0) { %>
		<div class="alert alert-danger">
			<% messages['error'].forEach(function(message) { %>
			<%= message %>
			<br>
			<% }); %>
		</div>
		<br>
		<% } %>
		<% if (messages && messages['warning'].length > 0) { %>
		<div class="alert alert-warning">
			<% messages['warning'].forEach(function(message) { %>
			<%= message %>
			<br>
			<% }); %>
		</div>
		<br>
		<% } %>
		<% if (messages && messages['success'].length > 0) { %>
		<div class="alert alert-success">
			<% messages['success'].forEach(function(message) { %>
			<%= message %>
			<br>
			<% }); %>
		</div>
		<br>
		<% } %> 

		
		
		<%- body %>

		<!--
		Client-side Templates
		========================

		HTML templates are important prerequisites of modern, rich client applications.
		To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
		that you load these templates client-side.

		By default, your Gruntfile is configured to automatically load and precompile
		client-side JST templates in your `assets/templates` folder, then
		include them here automatically (between TEMPLATES and TEMPLATES END).

		To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
		For example, here are a few things you could do:

		+ Import templates from other directories
		+ Use a different template engine (handlebars, jade, dust, etc.)
		+ Internationalize your client-side templates using a server-side
		stringfile before they're served.
		-->

		<!--TEMPLATES-->
		
		<!--TEMPLATES END-->

		<!--

		Client-side Javascript
		========================

		You can always bring in JS files manually with `script` tags, or asynchronously
		on the client using a solution like AMD (RequireJS).  Or, if you like, you can
		take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

		By default, files in your `assets/js` folder are included here
		automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
		CoffeeScript (.coffee) are supported. In production, your scripts will be minified
		and concatenated into a single file.

		To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
		For example, here are a few things you could do:

		+ Change the order of your scripts
		+ Import scripts from other directories
		+ Use a different preprocessor, like TypeScript

		-->

		<!--SCRIPTS-->
		<script src="/js/dependencies/sails.io.js"></script>
		<script src="/js/betsApp.js"></script>
		<script src="/js/mainPageApp.js"></script>
		<script src="/js/resultsApp.js"></script>
		<!--SCRIPTS END-->
	</body>
</html>
